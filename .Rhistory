field <- field %>%
mutate(Language = case_when(
Language == 'BE' ~ 'english',
Language == 'DE' ~ 'german',
Language == 'SR' ~ 'portuguese',
Language == 'VA' ~ 'daakie',
Language == 'BR' ~ 'berber',
Language == 'PA' ~ 'palikur',
TRUE ~ Language  # This keeps the original value for other cases
))
View(field)
L2_info_field <- filter(field, !duplicated(ID)) %>% select(ID, Language, L2)
L2_info_field <- L2_info_field %>%
mutate(L2 = ifelse(L2 %in% c('0', 'NA', ' '), NA, L2)) %>%
mutate(L2 = ifelse(is.na(L2), 'no_L2', L2))
View(L2_info_field)
L2_info_field <- mutate(L2_info_field,
EnglishL2YesNo = ifelse(grepl('english', L2, ignore.case = TRUE), TRUE, FALSE))
View(web)
web <- read_csv(paste0(data, 'web_experiment_cleaned.csv'))
View(web)
rm(field)
field <- read.csv(paste0(data, "fieldwork-responses-rest.csv"), sep = ";")
# Load:
demographics <- read_delim(paste0(data, 'fieldwork-personal-data.csv'), delim = ';')
colnames(field)[ncol(field)] <- 'PA08'
# Remove rows with names "bouba-ort", "bouba-aud", "kiki-ort", and "kiki-aud"
field <- field %>%
filter(!file %in% c("bouba-ort", "bouba-aud", "kiki-ort", "kiki-aud"))
field[1, -1] <- gsub("rock", "r", field[1, -1])
field <- field %>%
select(-file) %>%
pivot_longer(everything(), names_to = "ID", values_to = "value") %>%
arrange(ID) %>%  # Arrange by ID
group_by(ID) %>%
mutate(audio = rep(c("r", "l"), each = n() / 2),  # Repeat "r" and "l" for each ID
response = ifelse(value %in% c("0", "NA", " "), NA, value)) %>%
ungroup() %>%
select(-value)  # Remove the original "value" column
field <- mutate(field,
Language = str_extract(ID, '[A-Z]+'),
Participant = str_extract(ID, '\\d+'))
# Rename so that key columns match names:
demographics <- rename(demographics,
ID = subject,
Age = age,
Sex = gender,
L2 = "other-lang")
# Get only that what is needed:
demographics <- select(demographics,
ID, Age, Sex, L2)
# Join:
field <- left_join(field, demographics)
field <- filter(field, Age > 18)
field <- filter(field, Language != 'US')
field <- filter(field, Language != 'PL')
field$Name <- NA
field[field$Language == 'BE', ]$Name <- 'english'
field[field$Language == 'DE', ]$Name <- 'german'
field[field$Language == 'SR', ]$Name <- 'portuguese'
field[field$Language == 'VA', ]$Name <- 'daakie'
field[field$Language == 'BR', ]$Name <- 'berber'
field[field$Language == 'PA', ]$Name <- 'palikur'
L2_info_field <- filter(field, !duplicated(ID)) %>% select(ID, Language, L2)
L2_info_field <- filter(field, !duplicated(ID)) %>% select(ID, Language, Name, L2)
L2_info_field <- L2_info_field %>%
mutate(L2 = ifelse(L2 %in% c('0', 'NA', ' '), NA, L2)) %>%
mutate(L2 = ifelse(is.na(L2), 'no_L2', L2))
L2_info_field <- mutate(L2_info_field,
EnglishL2YesNo = ifelse(grepl('english', L2, ignore.case = TRUE), TRUE, FALSE))
L2_info_field <- L2_info_field %>%
mutate(L2 = str_replace_all(L2, regex('British Sign Language', ignore_case = TRUE), 'BSL'),
L2 = str_replace_all(L2, regex('Mandarin', ignore_case = TRUE), 'chinese'),
L2 = str_replace_all(L2, regex('Moroccan Arabic', ignore_case = TRUE), 'arabic'),
L2 = str_replace_all(L2, regex('Standard Arabic', ignore_case = TRUE), 'arabic'))
View(L2_info_field)
L2_info_field <- L2_info_field %>%
mutate(L2 = ifelse(L2 %in% c("no_L2", "BSL"), L2, str_to_lower(L2))) %>%
rowwise() %>%
mutate(L2 = paste(unique(unlist(str_split(L2, ",\\s*"))), collapse = ", "))
View(field)
View(L2_info_field)
L2_info_field <- L2_info_field %>%
mutate(r_l_distinction_L1 = NA,
trill_real_L1 = NA,
trill_occ_L1 = NA,
r_l_distinction_L2 = NA,
trill_real_L2 = NA,
trill_occ_L2 = NA)
L2_info_field <- L2_info_field %>%
left_join(languages_data, by = c("Name" = "Languages")) %>%
mutate(r_l_distinction_L1 = coalesce(r_l_distinction, r_l_distinction_L1),
trill_real_L1 = coalesce(trill_real, trill_real_L1),
trill_occ_L1 = coalesce(trill_occ, trill_occ_L1)) %>%
select(-c(glottocode, r_l_distinction, trill_real, trill_occ))
View(languages_data)
View(L2_info_field)
L2_info_field$L2 <- sub("\\s*\\(restricted reading skills\\)", "", L2_info_field$L2)
View(L2_info_field)
View(L2_info_field)
# Save the original 'l2' column
original_L2 <- L2_info_field$L2
# Run the main code
L2_info_field <- L2_info_field %>%
separate_rows(L2, sep = ",\\s*") %>%
left_join(languages_data, by = c("L2" = "Languages")) %>%
group_by(ID) %>%
mutate(r_l_distinction_L2 = if(all(is.na(r_l_distinction))) NA else max(coalesce(r_l_distinction, r_l_distinction_L2), na.rm = TRUE),
trill_real_L2 = if(all(is.na(trill_real))) NA else max(coalesce(trill_real, trill_real_L2), na.rm = TRUE),
trill_occ_L2 = if(all(is.na(trill_occ))) NA else max(coalesce(trill_occ, trill_occ_L2), na.rm = TRUE)) %>%
select(-c(glottocode, r_l_distinction, trill_real, trill_occ)) %>%
distinct(ID, .keep_all = TRUE) %>%
ungroup()
# Replace the original 'L2' column
L2_info_field$L2 <- original_L2
rm(original_L2)
field <- left_join(field, select(L2_info_field, -Language), by = c('ID' = 'ID'))
View(field)
field <- field %>%
rename(Name = Name.x,
L2_raw = L2.x,
L2_cleaned = L2.y) %>%
select(-Name.y)
field <- field %>%
filter(!(ID %in% c("DE08", "DE09")))
View(field)
web$match = web$audio == web$response
field$match = field$audio == field$response
View(web)
field %>% count(ID)
ppt_N <- field %>% count(ID)
all(ppt_N$n == 2)
rm(ppt_N)
web %>% count(Language) %>%
mutate(n = n / 2) %>%
print()
field %>% count(Language) %>%
mutate(n = n / 2) %>%
print()
field %>% count(Name) %>%
mutate(n = n / 2) %>%
print()
field <- read.csv(paste0(data, "fieldwork-responses-rest.csv"), sep = ";")
# Load:
demographics <- read_delim(paste0(data, 'fieldwork-personal-data.csv'), delim = ';')
# Chunk 48: fix colname
colnames(field)[ncol(field)] <- 'PA08'
# Chunk 49: reshape table
# Remove rows with names "bouba-ort", "bouba-aud", "kiki-ort", and "kiki-aud"
field <- field %>%
filter(!file %in% c("bouba-ort", "bouba-aud", "kiki-ort", "kiki-aud"))
field[1, -1] <- gsub("rock", "r", field[1, -1])
field <- field %>%
select(-file) %>%
pivot_longer(everything(), names_to = "ID", values_to = "value") %>%
arrange(ID) %>%  # Arrange by ID
group_by(ID) %>%
mutate(audio = rep(c("r", "l"), each = n() / 2),  # Repeat "r" and "l" for each ID
response = ifelse(value %in% c("0", "NA", " "), NA, value)) %>%
ungroup() %>%
select(-value)  # Remove the original "value" column
# Chunk 50: get lang info
field <- mutate(field,
Language = str_extract(ID, '[A-Z]+'),
Participant = str_extract(ID, '\\d+'))
# Chunk 51: add age gender
# Rename so that key columns match names:
demographics <- rename(demographics,
ID = subject,
Age = age,
Sex = gender,
L2 = "other-lang")
# Get only that what is needed:
demographics <- select(demographics,
ID, Age, Sex, L2)
# Join:
field <- left_join(field, demographics)
# Chunk 52: exclude field
field <- filter(field, Age > 18)
# Chunk 53: exclude polish
field <- filter(field, Language != 'US')
field <- filter(field, Language != 'PL')
# Chunk 54: add info on contrast
field$Name <- NA
field[field$Language == 'BE', ]$Name <- 'english'
field[field$Language == 'DE', ]$Name <- 'german'
field[field$Language == 'SR', ]$Name <- 'portuguese'
field[field$Language == 'VA', ]$Name <- 'daakie'
field[field$Language == 'BR', ]$Name <- 'berber'
field[field$Language == 'PA', ]$Name <- 'palikur'
# Chunk 55: process l2
L2_info_field <- filter(field, !duplicated(ID)) %>% select(ID, Language, Name, L2)
# Chunk 56: add no l2
L2_info_field <- L2_info_field %>%
mutate(L2 = ifelse(L2 %in% c('0', 'NA', ' '), NA, L2)) %>%
mutate(L2 = ifelse(is.na(L2), 'no_L2', L2))
# Chunk 57: add english
L2_info_field <- mutate(L2_info_field,
EnglishL2YesNo = ifelse(grepl('english', L2, ignore.case = TRUE), TRUE, FALSE))
# Chunk 58: l2 conversions
L2_info_field <- L2_info_field %>%
mutate(L2 = str_replace_all(L2, regex('British Sign Language', ignore_case = TRUE), 'BSL'),
L2 = str_replace_all(L2, regex('Mandarin', ignore_case = TRUE), 'chinese'),
L2 = str_replace_all(L2, regex('Moroccan Arabic', ignore_case = TRUE), 'arabic'),
L2 = str_replace_all(L2, regex('Standard Arabic', ignore_case = TRUE), 'arabic'))
L2_info_field <- L2_info_field %>%
mutate(L2 = ifelse(L2 %in% c("no_L2", "BSL"), L2, str_to_lower(L2))) %>%
rowwise() %>%
mutate(L2 = paste(unique(unlist(str_split(L2, ",\\s*"))), collapse = ", "))
L2_info_field$L2 <- sub("\\s*\\(restricted reading skills\\)", "", L2_info_field$L2)
# Chunk 59: add rhotic cols field
L2_info_field <- L2_info_field %>%
mutate(r_l_distinction_L1 = NA,
trill_real_L1 = NA,
trill_occ_L1 = NA,
r_l_distinction_L2 = NA,
trill_real_L2 = NA,
trill_occ_L2 = NA)
# Chunk 60: add rhotic info l1
L2_info_field <- L2_info_field %>%
left_join(languages_data, by = c("Name" = "Languages")) %>%
mutate(r_l_distinction_L1 = coalesce(r_l_distinction, r_l_distinction_L1),
trill_real_L1 = coalesce(trill_real, trill_real_L1),
trill_occ_L1 = coalesce(trill_occ, trill_occ_L1)) %>%
select(-c(glottocode, r_l_distinction, trill_real, trill_occ))
# Chunk 61: add rhotic info l2
# Save the original 'l2' column
original_L2 <- L2_info_field$L2
# Run the main code
L2_info_field <- L2_info_field %>%
separate_rows(L2, sep = ",\\s*") %>%
left_join(languages_data, by = c("L2" = "Languages")) %>%
group_by(ID) %>%
mutate(r_l_distinction_L2 = if(all(is.na(r_l_distinction))) NA else max(coalesce(r_l_distinction, r_l_distinction_L2), na.rm = TRUE),
trill_real_L2 = if(all(is.na(trill_real))) NA else max(coalesce(trill_real, trill_real_L2), na.rm = TRUE),
trill_occ_L2 = if(all(is.na(trill_occ))) NA else max(coalesce(trill_occ, trill_occ_L2), na.rm = TRUE)) %>%
select(-c(glottocode, r_l_distinction, trill_real, trill_occ)) %>%
distinct(ID, .keep_all = TRUE) %>%
ungroup()
# Replace the original 'L2' column
L2_info_field$L2 <- original_L2
rm(original_L2)
# Chunk 62: l2 and field
field <- left_join(field, select(L2_info_field, -Language), by = c('ID' = 'ID'))
# Chunk 63: rename vars field
field <- field %>%
rename(Name = Name.x,
L2_raw = L2.x,
L2_cleaned = L2.y) %>%
select(-Name.y)
# Chunk 64: how many per participant
ppt_N <- field %>% count(ID)
# Chunk 65: check response N
all(ppt_N$n == 2)
# Chunk 66: remove less than 2
rm(ppt_N)
# Chunk 67: counts per lang
field %>% count(Name) %>%
mutate(n = n / 2) %>%
print()
# Chunk 68: congruency
field$match = field$audio == field$response
View(field)
field <- field %>%
mutate(match = ifelse(is.na(match), FALSE, match))
langs <- read_csv(paste0(data, 'language_info_field.csv'))
field <- left_join(field, langs)
View(web)
View(field)
out <- field[, c('ID', 'Language', 'Name', 'Script', 'Family', 'Autotyp_Area', 'audio', 'match')]
# Rename column names for consistency with the main analysis:
out <- rename(out, Condition = audio)
write_csv(out, paste0(data,'field_raw_trials.csv'))
View(field)
ID_tabs <- with(field, table(audio, response, ID))
matches <- numeric(dim(ID_tabs)[3])
for (i in seq_along(matches)) {
matches[i] <- as.integer(sum(diag(ID_tabs[, , i])) == 2)
}
ids <- unique(field$ID)
r_ppt <- tibble(ID = ids, Match = matches)
rm(ids, i, ID_tabs, matches)
r_ppt$Language <- field[match(r_ppt$ID, field$ID), ]$Language
r_ppt$Name <- field[match(r_ppt$ID, field$ID), ]$Name
r_ppt$Script <- field[match(r_ppt$ID, field$ID), ]$Script
r_ppt$Family <- field[match(r_ppt$ID, field$ID), ]$Family
r_ppt$Autotyp_Area <- field[match(r_ppt$ID, field$ID), ]$Autotyp_Area
r_ppt$L2 <- field[match(r_ppt$ID, field$ID), ]$L2_raw
r_ppt$EnglishL2YesNo <- field[match(r_ppt$ID, field$ID), ]$EnglishL2YesNo
r_ppt$r_l_distinction_L1 <- field[match(r_ppt$ID, field$ID), ]$r_l_distinction_L1
r_ppt$trill_real_L1 <- field[match(r_ppt$ID, field$ID), ]$trill_real_L1
r_ppt$trill_occ_L1 <- field[match(r_ppt$ID, field$ID), ]$trill_occ_L1
r_ppt$r_l_distinction_L2 <- field[match(r_ppt$ID, field$ID), ]$r_l_distinction_L2
r_ppt$trill_real_L2 <- field[match(r_ppt$ID, field$ID), ]$trill_real_L2
r_ppt$trill_occ_L2 <- field[match(r_ppt$ID, field$ID), ]$trill_occ_L2
View(r_ppt)
View(field)
View(langs)
field <- left_join(field, langs, by = Language)
field <- left_join(field, langs, by = "Language")
View(field)
field <- read.csv(paste0(data, "fieldwork-responses-rest.csv"), sep = ";")
# Load:
demographics <- read_delim(paste0(data, 'fieldwork-personal-data.csv'), delim = ';')
colnames(field)[ncol(field)] <- 'PA08'
# Remove rows with names "bouba-ort", "bouba-aud", "kiki-ort", and "kiki-aud"
field <- field %>%
filter(!file %in% c("bouba-ort", "bouba-aud", "kiki-ort", "kiki-aud"))
field[1, -1] <- gsub("rock", "r", field[1, -1])
field <- field %>%
select(-file) %>%
pivot_longer(everything(), names_to = "ID", values_to = "value") %>%
arrange(ID) %>%  # Arrange by ID
group_by(ID) %>%
mutate(audio = rep(c("r", "l"), each = n() / 2),  # Repeat "r" and "l" for each ID
response = ifelse(value %in% c("0", "NA", " "), NA, value)) %>%
ungroup() %>%
select(-value)  # Remove the original "value" column
field <- mutate(field,
Language = str_extract(ID, '[A-Z]+'),
Participant = str_extract(ID, '\\d+'))
# Rename so that key columns match names:
demographics <- rename(demographics,
ID = subject,
Age = age,
Sex = gender,
L2 = "other-lang")
# Get only that what is needed:
demographics <- select(demographics,
ID, Age, Sex, L2)
# Join:
field <- left_join(field, demographics)
field <- filter(field, Age > 18)
field <- filter(field, Language != 'US')
field <- filter(field, Language != 'PL')
field$Name <- NA
field[field$Language == 'BE', ]$Name <- 'english'
field[field$Language == 'DE', ]$Name <- 'german'
field[field$Language == 'SR', ]$Name <- 'portuguese'
field[field$Language == 'VA', ]$Name <- 'daakie'
field[field$Language == 'BR', ]$Name <- 'berber'
field[field$Language == 'PA', ]$Name <- 'palikur'
L2_info_field <- filter(field, !duplicated(ID)) %>% select(ID, Language, Name, L2)
L2_info_field <- L2_info_field %>%
mutate(L2 = ifelse(L2 %in% c('0', 'NA', ' '), NA, L2)) %>%
mutate(L2 = ifelse(is.na(L2), 'no_L2', L2))
L2_info_field <- mutate(L2_info_field,
EnglishL2YesNo = ifelse(grepl('english', L2, ignore.case = TRUE), TRUE, FALSE))
L2_info_field <- L2_info_field %>%
mutate(L2 = str_replace_all(L2, regex('British Sign Language', ignore_case = TRUE), 'BSL'),
L2 = str_replace_all(L2, regex('Mandarin', ignore_case = TRUE), 'chinese'),
L2 = str_replace_all(L2, regex('Moroccan Arabic', ignore_case = TRUE), 'arabic'),
L2 = str_replace_all(L2, regex('Standard Arabic', ignore_case = TRUE), 'arabic'))
L2_info_field <- L2_info_field %>%
mutate(L2 = ifelse(L2 %in% c("no_L2", "BSL"), L2, str_to_lower(L2))) %>%
rowwise() %>%
mutate(L2 = paste(unique(unlist(str_split(L2, ",\\s*"))), collapse = ", "))
L2_info_field$L2 <- sub("\\s*\\(restricted reading skills\\)", "", L2_info_field$L2)
L2_info_field <- L2_info_field %>%
mutate(r_l_distinction_L1 = NA,
trill_real_L1 = NA,
trill_occ_L1 = NA,
r_l_distinction_L2 = NA,
trill_real_L2 = NA,
trill_occ_L2 = NA)
L2_info_field <- L2_info_field %>%
left_join(languages_data, by = c("Name" = "Languages")) %>%
mutate(r_l_distinction_L1 = coalesce(r_l_distinction, r_l_distinction_L1),
trill_real_L1 = coalesce(trill_real, trill_real_L1),
trill_occ_L1 = coalesce(trill_occ, trill_occ_L1)) %>%
select(-c(glottocode, r_l_distinction, trill_real, trill_occ))
# Save the original 'l2' column
original_L2 <- L2_info_field$L2
# Run the main code
L2_info_field <- L2_info_field %>%
separate_rows(L2, sep = ",\\s*") %>%
left_join(languages_data, by = c("L2" = "Languages")) %>%
group_by(ID) %>%
mutate(r_l_distinction_L2 = if(all(is.na(r_l_distinction))) NA else max(coalesce(r_l_distinction, r_l_distinction_L2), na.rm = TRUE),
trill_real_L2 = if(all(is.na(trill_real))) NA else max(coalesce(trill_real, trill_real_L2), na.rm = TRUE),
trill_occ_L2 = if(all(is.na(trill_occ))) NA else max(coalesce(trill_occ, trill_occ_L2), na.rm = TRUE)) %>%
select(-c(glottocode, r_l_distinction, trill_real, trill_occ)) %>%
distinct(ID, .keep_all = TRUE) %>%
ungroup()
# Replace the original 'L2' column
L2_info_field$L2 <- original_L2
rm(original_L2)
field <- left_join(field, select(L2_info_field, -Language), by = c('ID' = 'ID'))
field <- field %>%
rename(Name = Name.x,
L2_raw = L2.x,
L2_cleaned = L2.y) %>%
select(-Name.y)
ppt_N <- field %>% count(ID)
all(ppt_N$n == 2)
rm(ppt_N)
field %>% count(Name) %>%
mutate(n = n / 2) %>%
print()
langs <- read_csv(paste0(data, 'language_info_field.csv'))
View(langs)
field <- left_join(field, langs, by = "Language")
View(field)
field <- field %>%
rename(Name = Name.y) %>%
select(-Name.x)
field$match = field$audio == field$response
field <- field %>%
mutate(match = ifelse(is.na(match), FALSE, match))
out <- field[, c('ID', 'Language', 'Name', 'Script', 'Family', 'Autotyp_Area', 'audio', 'match')]
# Rename column names for consistency with the main analysis:
out <- rename(out, Condition = audio)
write_csv(out, paste0(data,'field_raw_trials.csv'))
View(out)
ID_tabs <- with(field, table(audio, response, ID))
matches <- numeric(dim(ID_tabs)[3])
for (i in seq_along(matches)) {
matches[i] <- as.integer(sum(diag(ID_tabs[, , i])) == 2)
}
ids <- unique(field$ID)
r_ppt <- tibble(ID = ids, Match = matches)
rm(ids, i, ID_tabs, matches)
r_ppt$Language <- field[match(r_ppt$ID, field$ID), ]$Language
r_ppt$Name <- field[match(r_ppt$ID, field$ID), ]$Name
r_ppt$Script <- field[match(r_ppt$ID, field$ID), ]$Script
r_ppt$Family <- field[match(r_ppt$ID, field$ID), ]$Family
r_ppt$Autotyp_Area <- field[match(r_ppt$ID, field$ID), ]$Autotyp_Area
r_ppt$L2 <- field[match(r_ppt$ID, field$ID), ]$L2_raw
r_ppt$EnglishL2YesNo <- field[match(r_ppt$ID, field$ID), ]$EnglishL2YesNo
r_ppt$r_l_distinction_L1 <- field[match(r_ppt$ID, field$ID), ]$r_l_distinction_L1
r_ppt$trill_real_L1 <- field[match(r_ppt$ID, field$ID), ]$trill_real_L1
r_ppt$trill_occ_L1 <- field[match(r_ppt$ID, field$ID), ]$trill_occ_L1
r_ppt$r_l_distinction_L2 <- field[match(r_ppt$ID, field$ID), ]$r_l_distinction_L2
r_ppt$trill_real_L2 <- field[match(r_ppt$ID, field$ID), ]$trill_real_L2
r_ppt$trill_occ_L2 <- field[match(r_ppt$ID, field$ID), ]$trill_occ_L2
View(r_ppt)
ID_tabs <- with(field, table(audio, response, ID))
ID_tabs
dim(ID_tabs)[3]
numeric(dim(ID_tabs)[3])
ID_tabs
table(audio, response, ID)
str(field)
View(web)
ID_tabs <- with(field, table(audio, response, ID))
matches <- numeric(dim(ID_tabs)[3])
for (i in seq_along(matches)) {
matches[i] <- as.integer(sum(diag(ID_tabs[, , i])) == 2)
}
ids <- unique(field$ID)
r_ppt <- tibble(ID = ids, Match = matches)
rm(ids, i, ID_tabs, matches)
rm(r_ppt)
r_ppt <- field %>%
group_by(ID) %>%
summarise(Match = if(all(match == TRUE, na.rm = TRUE), 1, 0))
r_ppt <- field %>%
group_by(ID) %>%
summarise(Match = if(all(match[!is.na(match)] == TRUE), 1, 0))
r_ppt <- field %>%
group_by(ID) %>%
summarise(Match = if(all(match == TRUE), 1, 0))
r_ppt <- field %>%
group_by(ID) %>%
summarise(Match = as.integer(all(match == TRUE)))
View(r_ppt)
field <- read.csv(paste0(data, "fieldwork-responses-rest.csv"), sep = ";")
View(field)
field <- read.csv(paste0(data, "fieldwork-responses-rest.csv"), sep = ",")
field <- read.csv(paste0(data, "fieldwork-responses-rest.csv"), sep = "\")
field <- read.csv(paste0(data, "fieldwork-responses-rest.csv"), sep = "\t")
field <- read.csv(paste0(data, "fieldwork-responses-rest.csv"), sep = "\t")
View(field)
# Load:
demographics <- read_delim(paste0(data, 'fieldwork-personal-data.csv'), delim = ';')
colnames(field)[ncol(field)] <- 'PA08'
# Remove rows with names "bouba-ort", "bouba-aud", "kiki-ort", and "kiki-aud"
field <- field %>%
filter(!file %in% c("bouba-ort", "bouba-aud", "kiki-ort", "kiki-aud"))
field <- mutate(field,
Language = str_extract(ID, '[A-Z]+'),
Participant = str_extract(ID, '\\d+'))
# Rename so that key columns match names:
demographics <- rename(demographics,
ID = subject,
Age = age,
Sex = gender,
L2 = "other-lang")
# Get only that what is needed:
demographics <- select(demographics,
ID, Age, Sex, L2)
# Join:
field <- left_join(field, demographics)
field <- filter(field, Age > 18)
field <- filter(field, Language != 'US')
field$Name <- NA
field[field$Language == 'BE', ]$Name <- 'english'
View(field)
# Load:
demographics <- read_delim(paste0(data, 'fieldwork-personal-data.csv'), delim = ';')
colnames(field)[ncol(field)] <- 'PA08'
# Remove rows with names "bouba-ort", "bouba-aud", "kiki-ort", and "kiki-aud"
field <- field %>%
filter(!file %in% c("bouba-ort", "bouba-aud", "kiki-ort", "kiki-aud"))
field <- read.csv(paste0(data, "fieldwork-responses-rest.csv"), sep = "\t")
# Load:
demographics <- read_delim(paste0(data, 'fieldwork-personal-data.csv'), delim = ';')
colnames(field)[ncol(field)] <- 'PA08'
# Remove rows with names "bouba-ort", "bouba-aud", "kiki-ort", and "kiki-aud"
field <- field %>%
filter(!file %in% c("bouba-ort", "bouba-aud", "kiki-ort", "kiki-aud"))
View(field)
