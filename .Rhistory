#web %>% group_by(Family) %>% select(Family, Name) %>% unique() %>% arrange(Family)
table(web$r_l_distinction_L1, web$Autotyp_Area)
#web %>% group_by(Autotyp_Area) %>% select(Autotyp_Area, Name) %>% unique() %>% arrange(Autotyp_Area)
# Chunk 34
table(web$r_l_distinction_L2, web$Language)
table(web$r_l_distinction_L2, web$Family)
table(web$r_l_distinction_L2, web$Autotyp_Area)
# Chunk 35
table(web$trill_real_L1, web$Language)
table(web$trill_real_L1, web$Family)
table(web$trill_real_L1, web$Autotyp_Area)
# Chunk 36
table(web$trill_real_L2, web$Language)
table(web$trill_real_L2, web$Family)
table(web$trill_real_L2, web$Autotyp_Area)
# Chunk 37: checks and coding factors
web <- mutate(web, Order = factor(Order, levels = c('r_first', 'l_first'))) # make factor with r_first as baseline
web %>% count(Order) %>% mutate(prop = n / sum(n))
# the order effect is decently balanced: 51.6% vs 48.3%
web %>% count(r_l_distinction_L1) %>%
mutate(prop = n / sum(n))
# highly imbalanced: 15.8% vs 84.2%
web %>% count(trill_real_L1) %>%
mutate(prop = n / sum(n))
# ok: 58.8% vs 41.2%
web %>% count(trill_occ_L1) %>%
mutate(prop = n / sum(n))
# 100% are 1 --> excluded from the model
## And for L2, just in case
web %>% count(r_l_distinction_L2) %>%
mutate(prop = n / sum(n))
# 13.5% missing, the rest almost all (86.3%) are 1 and 0.2% are 0 ---> exclude as well
web %>% count(trill_real_L2) %>%
mutate(prop = n / sum(n))
# 13.5% missing, the rest is balanced: 53.8% vs 32.7%
web %>% count(trill_occ_L2) %>%
mutate(prop = n / sum(n))
# 13.5% missing, the rest are all (86.5%) are 1 ---> exclude as well
#web <- mutate(web,
#               order_num = ifelse(Order == 'r_first', -0.5, +0.5))
# Code them as factors:
web$r_l_distinction_L1_f <- factor(c("same", "distinct")[web$r_l_distinction_L1 + 1], levels=c("same", "distinct"));
web$trill_real_L1_f      <- factor(c("no", "yes")[web$trill_real_L1 + 1], levels=c("no", "yes"));
web$trill_occ_L1_f       <- factor(c("no", "yes")[web$trill_occ_L1 + 1], levels=c("no", "yes"));
web$r_l_distinction_L2_f <- factor(c("same", "distinct")[web$r_l_distinction_L2 + 1], levels=c("same", "distinct"));
web$trill_real_L2_f      <- factor(c("no", "yes")[web$trill_real_L2 + 1], levels=c("no", "yes"));
web$trill_occ_L2_f       <- factor(c("no", "yes")[web$trill_occ_L2 + 1], levels=c("no", "yes"));
head(web)
## Let's investigate what happens if we analyze the languages with and without [r] in L1 separately:
web_wr <- web[ web$trill_real_L1_f == "yes", ]; web_nr <- web[ web$trill_real_L1_f != "yes", ];
# with [r]:
web_wr <- web[ web$trill_real_L1_f == "yes", ];
b_full_wr <- brm(Match ~ 1 +
Order + Sex + Age +
r_l_distinction_L1_f +
(1 + Order + Sex + Age | Language) +
(1 + Order + Sex + Age | Family) +
(1 + Order + Sex + Age| Autotyp_Area),
data = web_wr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
web_wr$r_l_distinction_L1_f
# with [r]:
web_wr <- web[ web$trill_real_L1_f == "yes", ];
b_full_wr <- brm(Match ~ 1 +
Order + Sex + Age +
#r_l_distinction_L1_f + # <- constantly "distinct"
(1 + Order + Sex + Age | Language) +
(1 + Order + Sex + Age | Family) +
(1 + Order + Sex + Age| Autotyp_Area),
data = web_wr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_wr); mcmc_plot(b_full_wr, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_wr, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_wr, c("Orderl_first = 0",                                      # p=0.49
"SexM = 0",                                              # p=0.84
"Age = 0",                                               # p=0.99
NULL));
b_null_wr <- brm(Match ~ 1 +
(1 | Language) +
(1 | Family) +
(1 | Autotyp_Area),
data = web_wr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
b_null_wr <- brm(Match ~ 1 +
(1 | Language) +
(1 | Family) +
(1 | Autotyp_Area),
data = web_wr,
family=bernoulli(link='logit'),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_null_wr); mcmc_plot(b_null_wr, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_null_wr, variable="^b_", regex=TRUE); # very decent
b_null_wr <- brms_fit_indices(b_null_wr);
# we can remove Age without any issues:
b_full_wr_na <- brm(Match ~ 1 +
Order + Sex +
#r_l_distinction_L1_f + # <- constantly "distinct"
(1 + Order + Sex | Language) +
(1 + Order + Sex | Family) +
(1 + Order + Sex | Autotyp_Area),
data = web_wr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_wr_na); mcmc_plot(b_full_wr_na, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_wr_na, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_wr_na, c("Orderl_first = 0",                                      # p=0.74
"SexM = 0",                                              # p=0.73
NULL));
# we can remove Sex without any issues:
b_full_wr_nas <- brm(Match ~ 1 +
Order +
#r_l_distinction_L1_f + # <- constantly "distinct"
(1 + Order | Language) +
(1 + Order | Family) +
(1 + Order | Autotyp_Area),
data = web_wr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_wr_nas); mcmc_plot(b_full_wr_nas, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_wr_nas, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_wr_nas, c("Orderl_first = 0",                                      # p=0.75
NULL));
b_full_wr_nas <- brms_fit_indices(b_full_wr_nas);
brms_compare_models(b_null_wr, b_full_wr_nas, "[null model]", "[+ order]"); # similar to the null
# -> so, for the languages with [r], nothing matters, but the intercept of the null model is really ok:
summary(b_null_wr);
hdi(b_null_wr); # 1.12
## without [r]:
web_nr <- web[ web$trill_real_L1_f != "yes", ];
## without [r]:
web_nr <- web[ web$trill_real_L1_f != "yes", ];
b_null_nr <- brm(Match ~ 1 +
(1 | Language) +
(1 | Family) +
(1 | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_null_nr); mcmc_plot(b_null_nr, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_null_nr, variable="^b_", regex=TRUE); # very decent
b_null_nr <- brms_fit_indices(b_null_nr);
b_full_nr <- brm(Match ~ 1 +
Order + Sex + Age +
r_l_distinction_L1_f +
(1 + Order + Sex + Age | Language) +
(1 + Order + Sex + Age | Family) +
(1 + Order + Sex + Age | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr); mcmc_plot(b_full_nr, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr, c("Orderl_first = 0",                                      # p=0.74
"SexM = 0",                                              # p=0.73
"Age = 0",                                               # p=0.94
"r_l_distinction_L1_fdistinct = 0",                      # p=
NULL));
# we can remove Age without any issues:
b_full_wr_na <- brm(Match ~ 1 +
Order + Sex +
r_l_distinction_L1_f +
(1 + Order + Sex | Language) +
(1 + Order + Sex | Family) +
(1 + Order + Sex | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_wr_na); mcmc_plot(b_full_wr_na, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_wr_na, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_wr_na, c("Orderl_first = 0",                                      # p=0.74
"SexM = 0",                                              # p=0.77
"r_l_distinction_L1_fdistinct = 0",                      # p=0.71
NULL));
# we can remove Sex without any issues:
b_full_wr_nas <- brm(Match ~ 1 +
Order +
r_l_distinction_L1_f +
(1 + Order | Language) +
(1 + Order | Family) +
(1 + Order | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_wr_nas); mcmc_plot(b_full_wr_nas, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_wr_nas, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_wr_nas, c("Orderl_first = 0",                                      # p=0.54
"r_l_distinction_L1_fdistinct = 0",                      # p=0.77
NULL));
# we can remove l/r distinction without any issues:
b_full_wr_nasl <- brm(Match ~ 1 +
Order +
(1 + Order | Language) +
(1 + Order | Family) +
(1 + Order | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_wr_nasl); mcmc_plot(b_full_wr_nasl, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_wr_nasl, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_wr_nasl, c("Orderl_first = 0",                                      # p=0.51
NULL));
b_full_wr_nasl <- brms_fit_indices(b_full_wr_nasl);
## without [r]:
web_nr <- web[ web$trill_real_L1_f == "no", ];
b_null_nr <- brm(Match ~ 1 +
(1 | Language) +
(1 | Family) +
(1 | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_null_nr); mcmc_plot(b_null_nr, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_null_nr, variable="^b_", regex=TRUE); # very decent
b_null_nr <- brms_fit_indices(b_null_nr);
b_full_nr <- brm(Match ~ 1 +
Order + Sex + Age +
r_l_distinction_L1_f +
(1 + Order + Sex + Age | Language) +
(1 + Order + Sex + Age | Family) +
(1 + Order + Sex + Age | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr); mcmc_plot(b_full_nr, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr, c("Orderl_first = 0",                                      # p=0.53
"SexM = 0",                                              # p=0.77
"Age = 0",                                               # p=0.97
"r_l_distinction_L1_fdistinct = 0",                      # p=0.71
NULL));
# we can remove Age without any issues:
b_full_nr_na <- brm(Match ~ 1 +
Order + Sex +
r_l_distinction_L1_f +
(1 + Order + Sex | Language) +
(1 + Order + Sex | Family) +
(1 + Order + Sex | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr_na); mcmc_plot(b_full_nr_na, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr_na, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr_na, c("Orderl_first = 0",                                      # p=0.54
"SexM = 0",                                              # p=0.78
"r_l_distinction_L1_fdistinct = 0",                      # p=0.77
NULL));
# we can remove Sex without any issues:
b_full_nr_nas <- brm(Match ~ 1 +
Order +
r_l_distinction_L1_f +
(1 + Order | Language) +
(1 + Order | Family) +
(1 + Order | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr_nas); mcmc_plot(b_full_nr_nas, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr_nas, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr_nas, c("Orderl_first = 0",                                      # p=0.51
"r_l_distinction_L1_fdistinct = 0",                      # p=0.77
NULL));
# we can remove l/r distinction without any issues:
b_full_nr_nasl <- brm(Match ~ 1 +
Order +
(1 + Order | Language) +
(1 + Order | Family) +
(1 + Order | Autotyp_Area),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr_nasl); mcmc_plot(b_full_nr_nasl, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr_nasl, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr_nasl, c("Orderl_first = 0",                                      # p=0.52
NULL));
b_full_nr_nasl <- brms_fit_indices(b_full_nr_nasl);
brms_compare_models(b_null_nr, b_full_nr_nasl, "[null model]", "[+ order]"); # null is better
# -> so, for the languages without [r], order has a
# however, the intercept of the null model is really shitty:
summary(b_full_nr_nasl);
brms::hypothesis(b_full_nr_nasl, c("Orderl_first = 0"));
hdi(b_full_nr_nasl); # 1.12 [-1.82, 3.40]
rope(b_full_nr_nasl);
plot_model(b_full_nr_nasl, type="pred", terms=c("Order"));
plot_model(b_full_nr_nasl, type="re");
b_full_nr_nasl_noaf <- brm(Match ~ 1 +
Order +
(1 + Order | Language),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr_nasl_noaf); mcmc_plot(b_full_nr_nasl_noaf, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr_nasl_noaf, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr_nasl_noaf, c("Orderl_first = 0",                                      # p=0.52
NULL));
b_full_nr_nasl_noaf <- brms_fit_indices(b_full_nr_nasl_noaf);
brms_compare_models(b_null_nr, b_full_nr_nasl_noaf, "[null model]", "[+ order]"); # + order is much better than null!
brms_compare_models(b_full_nr_nasl, b_full_nr_nasl_noaf, "[re + family + area]", "[re just language]"); # + order is much better than null!
# -> so, for the languages without [r], order has a clear effect (l_first - r_first): -1.16 [-2.83, 0.71], p(=0)=0.52, pROPE=6.2%, model comparison vs null clearly favor it
# moreover, the intercept is clearly positive: 2.77 [ 1.69, 3.81], pROPE=0.0%
summary(b_full_nr_nasl_noaf);
brms::hypothesis(b_full_nr_nasl_noaf, c("Orderl_first = 0"));
hdi(b_full_nr_nasl_noaf); # 1.12 [-1.82, 3.40]
rope(b_full_nr_nasl_noaf);
plot_model(b_full_nr_nasl_noaf, type="pred", terms=c("Order")); #ggsave("./plots/order_trill_relationship_model_predictions.jpg", width=6, height=6);
plot_model(b_full_nr_nasl_noaf, type="re");
brms_compare_models(b_null_nr, b_full_nr_nasl_noaf, "[null model]", "[+ order]"); # + order is much better than null!
b_null_nr_noaf <- brm(Match ~ 1 +
(1 | Language),
data = web_nr,
family=bernoulli(link='logit'),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_null_nr_noaf); mcmc_plot(b_null_nr_noaf, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_null_nr_noaf, variable="^b_", regex=TRUE); # very decent
b_null_nr_noaf <- brms_fit_indices(b_null_nr_noaf);
brms_compare_models(b_null_nr_noaf, b_full_nr_nasl_noaf, "[null model]", "[+ order]"); # + order is much better than null!
# -> so, for the languages without [r], order has an effect (l_first - r_first): -0.84 [-1.95, 0.38], p(=0)=0.59, pROPE=8.1%, model comparison vs null clearly favor it
# moreover, the intercept is clearly positive: 2.77 [ 1.69, 3.81], pROPE=0.0%
summary(b_full_nr_nasl_noaf);
brms::hypothesis(b_full_nr_nasl_noaf, c("Orderl_first = 0"));
hdi(b_full_nr_nasl_noaf);
rope(b_full_nr_nasl_noaf);
plot_model(b_full_nr_nasl_noaf, type="pred", terms=c("Order")); #ggsave("./plots/order_trill_relationship_model_predictions.jpg", width=6, height=6);
# let's check if the random slope for Order matters:
b_full_nr_nasl_noaf_ri <- brm(Match ~ 1 +
Order +
(1 | Language),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
b_full_nr_nasl_noaf_ri <- brm(Match ~ 1 +
Order +
(1 | Language),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr_nasl_noaf_ri); mcmc_plot(b_full_nr_nasl_noaf_ri, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr_nasl_noaf_ri, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr_nasl_noaf_ri, c("Orderl_first = 0",                                      # p=0.59
NULL));
b_full_nr_nasl_noaf_ri <- brms_fit_indices(b_full_nr_nasl_noaf_ri);
brms_compare_models(b_null_nr_noaf, b_full_nr_nasl_noaf_ri, "[null model]", "[+ order]"); # + order is much better than null!
brms_compare_models(b_full_nr_nasl_noaf, b_full_nr_nasl_noaf_ri, "[random slope order]", "[random intercept only]"); # just language seems enough (they are similar)
# -> so, for the languages without [r]:
# - area and family are not needed as random effects
# - random slopes for order are needed
# - order has an effect (l_first - r_first): -0.84 [-1.95, 0.38], p(=0)=0.59, pROPE=8.1%, model comparison vs null clearly favor it
# - moreover, the intercept is clearly positive: 2.77 [ 1.69, 3.81], pROPE=0.0%
summary(b_full_nr_nasl_noaf);
brms::hypothesis(b_full_nr_nasl_noaf, c("Orderl_first = 0"));
hdi(b_full_nr_nasl_noaf);
rope(b_full_nr_nasl_noaf);
plot_model(b_full_nr_nasl_noaf, type="pred", terms=c("Order")); #ggsave("./plots/order_trill_relationship_model_predictions.jpg", width=6, height=6);
plot_model(b_full_nr_nasl_noaf, type="re");
rope(b_null_wr);
load("./models/web_regressions_L1_models.rds")
web_regressions_L1_models$brms$b_full_wr_nas <- b_full_wr_nas
web_regressions_L1_models$brms$b_full_nr_nasl_noaf <- b_full_nr_nasl_noaf
#save(web_regressions_L1_models, file="./models/web_regressions_L1_models.rds", compress="xz", compression_level=9);
saveRDS(web_regressions_L1_models, file="./models/web_regressions_L1_models.rds", compress="xz");
/savrds
?saverds
?saveRDS
load("./models/web_regressions_L1_summaries.rds")
web_regressions_L1_summaries$brms$with_trill <- list("hdi"=bayestestR::hdi(b_null_wr, ci=0.95), "rope"=bayestestR::rope(b_null_wr, ci=0.95, ci_method="HDI", verbose=FALSE), "fixef"=fixef(b_null_wr), "ranef"=ranef(b_null_wr), "summary"=capture.output(summary(b_null_wr)))
web_regressions_L1_summaries$brms$without_trill <- list("hdi"=bayestestR::hdi(b_full_nr_nasl_noaf, ci=0.95), "hypotheses"=brms::hypothesis(b_full_nr_nasl_noaf, c("Orderl_first = 0")), "rope"=bayestestR::rope(b_full_nr_nasl_noaf, ci=0.95, ci_method="HDI", verbose=FALSE), "fixef"=fixef(b_full_nr_nasl_noaf), "ranef"=ranef(b_full_nr_nasl_noaf), "summary"=capture.output(summary(b_full_nr_nasl_noaf)), "cmp_0"=brms_compare_models(b_null_nr_noaf, b_full_nr_nasl_noaf, "[0]", "[order]"), "cmp_full"=brms_compare_models(b_full_nr, b_full_nr_nasl_noaf, "[full]", "[order]"))
web_regressions_L1_summaries$brms$without_trill <- list("hdi"=bayestestR::hdi(b_full_nr_nasl_noaf, ci=0.95), "hypotheses"=brms::hypothesis(b_full_nr_nasl_noaf, c("Orderl_first = 0")), "rope"=bayestestR::rope(b_full_nr_nasl_noaf, ci=0.95, ci_method="HDI", verbose=FALSE), "fixef"=fixef(b_full_nr_nasl_noaf), "ranef"=ranef(b_full_nr_nasl_noaf), "summary"=capture.output(summary(b_full_nr_nasl_noaf)), "cmp_0"=brms_compare_models(b_null_nr_noaf, b_full_nr_nasl_noaf, "[0]", "[order]"))
#save(web_regressions_L1_summaries, file="./models/web_regressions_L1_summaries.rds", compress="xz", compression_level=9);
saveRDS(web_regressions_L1_summaries, file="./models/web_regressions_L1_summaries.rds", compress="xz");
unlink("r_l_modeling_v2_cache", recursive = TRUE)
web$trill_real_L1_f
web$r_l_distinction_L1_f
web$r_l_distinction_L1_f[ web$trill_real_L1 == "yes" ]
web$r_l_distinction_L1_f[ web$trill_real_L1_f == "yes" ]
summary(b_full_wr)
tmp <- web_regressions_L1_summaries$brms$with_trill;
sprintf("%.1f%% [%.1f%%, %.1f%%]", 100*lo2p(tmp$fixef["Intercept", "Estimate"]), 100*lo2p(tmp$hdi$CI_low[ tmp$hdi$Parameter == "b_Intercept" ]), 100*lo2p(tmp$hdi$CI_high[ tmp$hdi$Parameter == "b_Intercept" ]))
web$r_l_distinction_L1_f[ web$trill_real_L1_f == "no" ]
summary(b_full_nr)
web_regressions_L1_summaries$brms$without_trill$summary
cat(paste0(web_regressions_L1_summaries$brms$without_trill$summary, collapse="\n"))
tmp <- web_regressions_L1_summaries$brms$without_trill
## what happen with L2 in the languages without [r]?
web_nr$trill_occ_L2_f
## what happen with L2 in the languages without [r]?
unique(web_nr$trill_occ_L2_f)
## what happen with L2 in the languages without [r]?
table(web_nr$trill_occ_L2_f); # -> both situations are present
## what happen with L2 in the languages without [r]?
table(web_nr$trill_real_L2_f); # -> both situations are present
b_full_nr_nasl_noaf_l2 <- brm(Match ~ 1 +
Order + trill_real_L2_f +
(1 + Order + trill_real_L2_f | Language),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr_nasl_noaf_l2); mcmc_plot(b_full_nr_nasl_noaf_l2, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr_nasl_noaf_l2, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr_nasl_noaf_l2, c("Orderl_first = 0",                                      # p=0.59
"trill_real_L2_fyes = 0",                                # p=
NULL));
b_full_nr_nasl_noaf_l2 <- brms_fit_indices(b_full_nr_nasl_noaf_l2);
brms_compare_models(b_null_nr_noaf, b_full_nr_nasl_noaf_l2, "[null model]", "[+ order]"); # + order is much better than null!
b_null_nr_noaf_l2 <- brm(Match ~ 1 +
(1 | Language),
data = b_full_nr_nasl_noaf_l2$data,
family=bernoulli(link='logit'),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_null_nr_noaf_l2); mcmc_plot(b_null_nr_noaf_l2, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_null_nr_noaf_l2, variable="^b_", regex=TRUE); # very decent
b_null_nr_noaf_l2 <- brms_fit_indices(b_null_nr_noaf_l2);
brms_compare_models(b_null_nr_noaf_l2, b_full_nr_nasl_noaf_l2, "[null model]", "[+ order + r/l]"); # + order is much better than null!
summary(b_full_nr_nasl_noaf_l2);
b_full_nr_nasl_noaf_l2_nor <- brm(Match ~ 1 +
Order +
(1 + Order | Language),
data = web_nr,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr_nasl_noaf_l2_nor); mcmc_plot(b_full_nr_nasl_noaf_l2_nor, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr_nasl_noaf_l2_nor, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr_nasl_noaf_l2_nor, c("Orderl_first = 0",                                      # p=0.73
NULL));
b_full_nr_nasl_noaf_l2_nor <- brms_fit_indices(b_full_nr_nasl_noaf_l2_nor);
brms_compare_models(b_full_nr_nasl_noaf_l2_nor, b_full_nr_nasl_noaf_l2, "[+ order]", "[+ order + r/l]"); # much better than the null
b_full_nr_nasl_noaf_l2_nor <- brm(Match ~ 1 +
Order +
(1 + Order | Language),
data = b_full_nr_nasl_noaf_l2$data,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b"),
brms::set_prior("lkj(2)", class="cor")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_full_nr_nasl_noaf_l2_nor); mcmc_plot(b_full_nr_nasl_noaf_l2_nor, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_full_nr_nasl_noaf_l2_nor, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_full_nr_nasl_noaf_l2_nor, c("Orderl_first = 0",                                      # p=0.73
NULL));
b_full_nr_nasl_noaf_l2_nor <- brms_fit_indices(b_full_nr_nasl_noaf_l2_nor);
brms_compare_models(b_full_nr_nasl_noaf_l2_nor, b_full_nr_nasl_noaf_l2, "[+ order]", "[+ order + r/l]"); # much better than the null
names(web_regressions_L1_models)
names(web_regressions_L1_models$brms)
web_regressions_L1_models$brms$b_full_nr_nasl_noaf_l2 <- b_full_nr_nasl_noaf_l2
#save(web_regressions_L1_models, file="./models/web_regressions_L1_models.rds", compress="xz", compression_level=9);
saveRDS(web_regressions_L1_models, file="./models/web_regressions_L1_models.rds", compress="xz");
web_regressions_L1_summaries$brms
web_regressions_L1_summaries$brms$without_trill$cmp_trillL2=brms_compare_models(b_full_nr_nasl_noaf_l2_nor, b_full_nr_nasl_noaf_l2, "[order]", "[order + r/l]")
#save(web_regressions_L1_summaries, file="./models/web_regressions_L1_summaries.rds", compress="xz", compression_level=9);
saveRDS(web_regressions_L1_summaries, file="./models/web_regressions_L1_summaries.rds", compress="xz");
