# - just the random intercepts for all random effects:
b_otexperiments_1 <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
Order : trill_real_L1_f +
(1 | Language) +
(1 | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_otexperiments_1); mcmc_plot(b_otexperiments_1, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_otexperiments_1, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_otexperiments_1, c("Orderl_first = 0",                                     # p=0.50
"trill_real_L1_fyes = 0",                               # p=0.12    *
"Orderl_first:trill_real_L1_fyes = 0"                   # p=0.50
));
plot_model(b_otexperiments_1, type="pred", terms=c("trill_real_L1_f", "Order"));
plot_model(b_otexperiments_1, type="re");
brms::hypothesis(b_otexperiments_1, c("Orderl_first = 0",                                     # p=0.50
"trill_real_L1_fyes = 0",                               # p=0.12    *
"Orderl_first:trill_real_L1_fyes = 0"                   # p=0.50
));
plot_model(b_otexperiments_1, type="pred", terms=c("trill_real_L1_f", "Order"));
plot_model(b_otexperiments_1, type="re");
ggplot(web, aes(y=Match, x=trill_real_L1_f)) + geom_jitter();
ggplot(web, aes(y=Match, x=trill_real_L1_f, color=Order)) + geom_jitter();
## Let' try to understand wht this "game" between Order and trill really means:
# - just the random intercepts for all random effects:
b_otexperiments_1 <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
Order : trill_real_L1_f +
(1 + Order | Language) +
(1 + Order | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_otexperiments_1); mcmc_plot(b_otexperiments_1, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_otexperiments_1, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_otexperiments_1, c("Orderl_first = 0",                                     # p=0.00    *
"trill_real_L1_fyes = 0",                               # p=0.10    *
"Orderl_first:trill_real_L1_fyes = 0"                   # p=0.29    *
));
## Let' try to understand wht this "game" between Order and trill really means:
# - just the random intercepts for all random effects:
b_otexperiments_1 <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
#Order : trill_real_L1_f +
(1 + Order | Language) +
(1 + Order | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
brms::hypothesis(b_otexperiments_1, c("Orderl_first = 0",                                     # p=0.00    *
"trill_real_L1_fyes = 0"                                # p=0.10    *
#"Orderl_first:trill_real_L1_fyes = 0"                   # p=0.29    *
));
plot_model(b_otexperiments_1, type="pred", terms=c("trill_real_L1_f", "Order"));
plot_model(b_otexperiments_1, type="re");
## Let' try to understand wht this "game" between Order and trill really means:
# - just the random intercepts for all random effects:
b_otexperiments_1 <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
(1 | Language) +
(1 | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
b_otexperiments_1 <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
(1 + Order | Language) +
(1 + Order | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_otexperiments_1); mcmc_plot(b_otexperiments_1, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_otexperiments_1, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_otexperiments_1, c("Orderl_first = 0",                                     # 0.44    *
"trill_real_L1_fyes = 0"                                # 0.19    *
));
plot_model(b_otexperiments_1, type="pred", terms=c("trill_real_L1_f", "Order"));
plot_model(b_otexperiments_1, type="re");
ggplot(web, aes(y=Match, x=trill_real_L1_f, color=Order)) + geom_jitter();
b_otexperiments_1 <- brms_fit_indices(b_otexperiments_1);
b_otexperiments_2 <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
(1 | Language) +
(1 | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_otexperiments_2); mcmc_plot(b_otexperiments_2, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_otexperiments_2, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_otexperiments_2, c("Orderl_first = 0",                                     # 0.44    *
"trill_real_L1_fyes = 0"                                # 0.19    *
));
plot_model(b_otexperiments_2, type="pred", terms=c("trill_real_L1_f", "Order"));
plot_model(b_otexperiments_2, type="re");
b_otexperiments_2 <- brms_fit_indices(b_otexperiments_2);
plot_model(b_otexperiments_2, type="pred", terms=c("trill_real_L1_f", "Order"));
plot_model(b_otexperiments_2, type="re");
plot_model(b_otexperiments_1, type="re");
b_otexperiments_3 <- brm(Match ~ 1 +
Order +
trill_real_L1_f,
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_otexperiments_3); mcmc_plot(b_otexperiments_3, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_otexperiments_3, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_otexperiments_3, c("Orderl_first = 0",                                     # 0.44    *
"trill_real_L1_fyes = 0"                                # 0.19    *
));
brms::hypothesis(b_otexperiments_2, c("Orderl_first = 0",                                     # 0.44    *
"trill_real_L1_fyes = 0"                                # 0.88    *
));
plot_model(b_otexperiments_3, type="re");
plot_model(b_otexperiments_3, type="pred", terms=c("trill_real_L1_f", "Order"));
# random slope for Order for Language only:
b_otexperiments_4 <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
(1 + Order | Language) +
(1 | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_otexperiments_4); mcmc_plot(b_otexperiments_4, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_otexperiments_4, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_otexperiments_4, c("Orderl_first = 0",                                     # 0.00    *
"trill_real_L1_fyes = 0"                                # 0.88
));
summary(b_otexperiments_1)
hdi(b_otexperiments_1);
brms::hypothesis(b_otexperiments_1, c("Orderl_first = 0",                                     # 0.44    *
"trill_real_L1_fyes = 0"                                # 0.19    *
));
summary(b_otexperiments_2);
brms::hypothesis(b_otexperiments_2, c("Orderl_first = 0",                                     # 0.00    *
"trill_real_L1_fyes = 0"                                # 0.57
));
hdi(b_otexperiments_2);
summary(b_otexperiments_3);
brms::hypothesis(b_otexperiments_3, c("Orderl_first = 0",                                     # 0.00    *
"trill_real_L1_fyes = 0"                                # 0.88
));
hdi(b_otexperiments_3);
summary(b_otexperiments_4);
brms::hypothesis(b_otexperiments_4, c("Orderl_first = 0",                                     # 0.54
"trill_real_L1_fyes = 0"                                # 0.25    *
));
hdi(b_otexperiments_4);
# random slope for Order for Family only:
b_otexperiments_5 <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
(1 | Language) +
(1 + Order | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_otexperiments_5); mcmc_plot(b_otexperiments_5, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_otexperiments_5, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_otexperiments_5, c("Orderl_first = 0",                                     # 0.54
"trill_real_L1_fyes = 0"                                # 0.25    *
));
hdi(b_otexperiments_5);
summary(b_otexperiments_1);
hdi(b_otexperiments_1);
brms::hypothesis(b_otexperiments_3, c("Orderl_first = 0",                                     # 0.00    *
"trill_real_L1_fyes = 0"                                # 0.88
));
hdi(b_otexperiments_3);
summary(b_otexperiments_4)
hdi(b_otexperiments_4);
summary(b_otexperiments_5);
hdi(b_otexperiments_5);
summary(b_otexperiments_2);
hdi(b_otexperiments_2);
summary(b_otexperiments_3);
hdi(b_otexperiments_3);
ggplot(web, aes(x=Match) + grom_bar();
ggplot(web, aes(x=Match)) + grom_bar();
ggplot(web, aes(x=Match)) + geom_bar();
ggplot(web, aes(x=Match)) + geom_bar(position = "stack");
ggplot(web, aes(x=Match, cfill=Match)) + geom_bar(position = "stack");
ggplot(web, aes(x=Match, fill=Match)) + geom_bar(position = "stack");
ggplot(web, aes(x=Match)) + geom_bar(position = "stack");
ggplot(web, aes(x=Match)) + geom_bar(position = "fill");
ggplot(web, aes(x=Match)) + geom_bar(position = "stack");
ggplot(web, aes(x=Order, fill=Match)) + geom_bar();
ggplot(web, aes(x=Order, group=Match)) + geom_bar();
ggplot(web, aes(x=Order, groups=Match)) + geom_bar();
ggplot(web, aes(fill=Match)) + geom_bar();
ggplot(web, aes(x=Match)) + geom_bar();
head(web)
ggplot(web, aes(x=Match)) + geom_bar() + facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match))) + geom_bar() + facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) + geom_bar() + facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) + geom_bar(position="stack") + facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) + geom_bar() + facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="fill", colour="white") +
facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
after_stat(geom = "text",
aes(label = stat(count)),
position="fill", colour="white") +
facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="fill", colour="white") +
facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="fill", colour="black") +
facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="cente", colour="black") +
facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="center", colour="black") +
facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="fill", colour="black") +
facet_grid(Order ~ trill_real_L1);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="fill", colour="black") +
facet_grid(trill_real_L1 ~ Order);
head(web)
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="fill", colour="black") +
facet_grid(trill_real_L1_f ~ Order);
ggplot(web, aes(x=as.factor(Match), fill=as.factor(Match))) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="stack", colour="black") +
facet_grid(trill_real_L1_f ~ Order);
plot_model(b_otexperiments_1, type="re");
# -> area does not really make a difference so let's ignore it for now
# -> adding random slopes for Order removes the interaction
# let's look at the random effects in more detail:
ranef(b_otexperiments_1);
# -> area does not really make a difference so let's ignore it for now
# -> adding random slopes for Order removes the interaction
# let's look at the random effects in more detail:
b_3_ranef <- ranef(b_otexperiments_1);
b_3_ranef
# no random slopes for Order:
b_otexperiments_2 <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
(1 | Language) +
(1 | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
b_3_ranef$Language
b_3_ranef$Language[,,"Intercept"]
b_3_ranef_Lg_intercept <- cdbind("Language"=rownames(b_3_ranef$Language[,,"Intercept"]), b_3_ranef$Language[,,"Intercept"]);
b_3_ranef_Lg_intercept <- cbind("Language"=rownames(b_3_ranef$Language[,,"Intercept"]), b_3_ranef$Language[,,"Intercept"]);
b_3_ranef_Lg_intercept
b_3_ranef_Lg_intercept <- cbind("Language"=rownames(b_3_ranef$Language[,,"Intercept"]), as.data.frame(b_3_ranef$Language[,,"Intercept"]));
b_3_ranef_Lg_intercept
head(web)
unique(web[,c("Language", "trill_real_L1_f")])
b_3_ranef_Lg_intercept <- merge(cbind("Language"=rownames(b_3_ranef$Language[,,"Intercept"]), as.data.frame(b_3_ranef$Language[,,"Intercept"])),
unique(web[,c("Language", "trill_real_L1_f")]),
by="Language",
all.x=TRUE, all.y=TRUE);
b_3_ranef_Lg_intercept
ranef(b_otexperiments_1);
b_3_ranef_Lg_order <- merge(cbind("Language"=rownames(b_3_ranef$Language[,,"Orderl_first"]), as.data.frame(b_3_ranef$Language[,,"Orderl_first"])),
unique(web[,c("Language", "trill_real_L1_f")]),
by="Language",
all.x=TRUE, all.y=TRUE);
b_3_ranef_Lg_order
b_order_trill_experiments <- list("rnd_intercept"=b_3_ranef_Lg_intercept, "rnd_slope_order"=b_3_ranef_Lg_order);
b_order_trill_experiments
b_3_ranef_Lg_intercept
ggplot(b_3_ranef_Lg_intercept, aes(y=Estimate, fill=trill_real_L1_f)) + geom_boxplot()
ggplot(b_3_ranef_Lg_order, aes(y=Estimate, fill=trill_real_L1_f)) + geom_boxplot()
ggplot(b_3_ranef_Lg_intercept, aes(y=Estimate, fill=trill_real_L1_f)) + geom_boxplot() + geom_violin();
ggplot(b_3_ranef_Lg_intercept, aes(y=Estimate, fill=trill_real_L1_f)) + geom_boxplot();
ggplot(b_3_ranef_Lg_intercept, aes(y=Estimate, fill=trill_real_L1_f)) + geom_boxplot() + geom_point();
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) + geom_boxplot() + geom_point();
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) + geom_boxplot() + geom_violin();
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) + geom_boxplot() + geom_violin() + geom_point();
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) + geom_violin() + geom_boxplot() + geom_point();
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) + geom_violin() + geom_boxplot(alpha=0.5) + geom_point();
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) + geom_violin() + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5);
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) + geom_violin() + geom_boxplot(alpha=0.5) + geom_jitter(alpha=0.5);
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) + geom_violin() + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5);
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) + geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5);
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
ylab("Rnadom intercept estimate");
ggplot(b_3_ranef_Lg_order, aes(y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
ylab("Random slope of Order estimate");
ggplot(b_3_ranef_Lg_order, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
ylab("Random slope of Order estimate");
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0) +
ylab("Random intercept estimate");
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="doted") +
ylab("Random intercept estimate");
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dotted") +
ylab("Random intercept estimate");
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Random intercept estimate");
ggplot(b_3_ranef_Lg_order, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Random slope of Order estimate");
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Random intercept estimate") + xalb("[r] present in L1");
ggplot(b_3_ranef_Lg_order, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Random slope of Order estimate") + xlab("[r] present in L1");
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Random intercept estimate") + xlab("[r] present in L1") + scale_fill_viridis_d();
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Random intercept estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1");
ggplot(b_3_ranef_Lg_order, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Random slope of Order estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1");
ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1") + ggtitle("Random intercepts by language");
ggplot(b_3_ranef_Lg_order, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1") + ggtitle("Random slopes of Order by language");
grid.arrange(ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1") + ggtitle("Random intercepts by language") +
NULL,
ggplot(b_3_ranef_Lg_order, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1") + ggtitle("Random slopes of Order by language") +
NULL,
ncol=2);
grid.arrange(ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1") + ggtitle("Random intercepts by language") + theme(legend.position = "bottom") +
NULL,
ggplot(b_3_ranef_Lg_order, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1") + ggtitle("Random slopes of Order by language") + theme(legend.position = "bottom") +
NULL,
ncol=2);
jpeg("./plots/order_trill_relationship_ranefs.jpg", width = 10, height = 5, units = "in", res=150);
grid.arrange(ggplot(b_3_ranef_Lg_intercept, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1") + ggtitle("Random intercepts by language") + theme(legend.position = "bottom") +
NULL,
ggplot(b_3_ranef_Lg_order, aes(x=trill_real_L1_f, y=Estimate, fill=trill_real_L1_f)) +
geom_violin(alpha=0.25) + geom_boxplot(alpha=0.5) + geom_point(alpha=0.5) +
geom_hline(yintercept=0.0, color="blue", linetype="dashed") +
ylab("Estimate") + xlab("[r] present in L1") + scale_fill_viridis_d(name="[r] present in L1") + ggtitle("Random slopes of Order by language") + theme(legend.position = "bottom") +
NULL,
ncol=2);
dev.off();
(i.e., not modelled but the actual raw data) by *Order* (columns) and the *presence of [r] in the L1* (rows)."}
web %>% modify("Match"=as.factor(c("no","yes")[Match+1], levels=c("no", "yes"))
)
web %>% modify("Match"=as.factor(c("no","yes")[Match+1], levels=c("no", "yes")))
web %>% mutate("Match"=as.factor(c("no","yes")[Match+1], levels=c("no", "yes")))
web %>% mutate("Match"=factor(c("no","yes")[Match+1], levels=c("no", "yes")))
ggplot(web %>% mutate("Match"=factor(c("no","yes")[Match+1], levels=c("no", "yes"))), aes(x=Match, fill=Match)) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="stack", colour="black") +
facet_grid(trill_real_L1_f ~ Order);
plot_model(b_otexperiments_1, type="pred", terms=c("trill_real_L1_f", "Order"));
plot_model(b_otexperiments_1, type="pred", terms=c("trill_real_L1_f", "Order")); ggsave("./plots/order_trill_relationship_model_predictions.jpg", width=6, height=6);
# check the interaction:
b_otexperiments_1_int <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
Order:trill_real_L1_f +
(1 + Order | Language) +
(1 + Order | Family),
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_otexperiments_1_int); mcmc_plot(b_otexperiments_1_int, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_otexperiments_1_int, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_otexperiments_1_int, c("Orderl_first = 0",                                     # 0.44    *
"trill_real_L1_fyes = 0",                               # 0.19    *
"Orderl_first:trill_real_L1_fyes = 0"                   # 0.19    *
));
hdi(b_otexperiments_1_int);
plot_model(b_otexperiments_1_int, type="pred", terms=c("trill_real_L1_f", "Order"));
plot_model(b_otexperiments_1_int, type="re");
# check the interaction:
b_otexperiments_3_int <- brm(Match ~ 1 +
Order +
trill_real_L1_f +
Order:trill_real_L1_f,
data = web,
family=bernoulli(link='logit'),
prior=c(brms::set_prior("student_t(5, 0, 2.5)", class="b")),
save_pars=save_pars(all=TRUE), # needed for Bayes factors
sample_prior=TRUE,             # needed for hypotheses tests
seed=998, cores=brms_ncores, iter=10000, warmup=4000, thin=2, control=list(adapt_delta=0.9999, max_treedepth=13));
summary(b_otexperiments_3_int); mcmc_plot(b_otexperiments_3_int, type="trace", variable="^b_", regex=TRUE); mcmc_plot(b_otexperiments_3_int, variable="^b_", regex=TRUE); # very decent
brms::hypothesis(b_otexperiments_3_int, c("Orderl_first = 0",                                     # 0.00    *
"trill_real_L1_fyes = 0",                               # 0.88
"Orderl_first:trill_real_L1_fyes = 0",
));
brms::hypothesis(b_otexperiments_3_int, c("Orderl_first = 0",                                     # 0.00    *
"trill_real_L1_fyes = 0",                               # 0.88
"Orderl_first:trill_real_L1_fyes = 0"
));
hdi(b_otexperiments_3_int);
plot_model(b_otexperiments_3_int, type="pred", terms=c("trill_real_L1_f", "Order"));
summary(b_otexperiments_1_int);
brms::hypothesis(b_otexperiments_1_int, c("Orderl_first = 0",                                     # 0.36    *
"trill_real_L1_fyes = 0",                               # 0.18    *
"Orderl_first:trill_real_L1_fyes = 0"                   # 0.75
));
hdi(b_otexperiments_1_int);
ggplot(web %>% mutate("Match"=factor(c("no","yes")[Match+1], levels=c("no", "yes"))), aes(x=Match, fill=Match)) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="stack", colour="black") +
facet_grid(trill_real_L1_f ~ Order);
ggplot(web %>% mutate("Match"=factor(c("no","yes")[Match+1], levels=c("no", "yes"))), aes(x=Match, fill=Match)) +
geom_bar()  +
stat_count(geom = "text",
aes(label = stat(count)),
position="stack", colour="black") +
facet_grid(. ~ Order);
